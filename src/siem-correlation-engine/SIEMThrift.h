/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SIEMThrift_H
#define SIEMThrift_H

#include <thrift/TDispatchProcessor.h>
#include "SIEMMessage_types.h"

namespace SIEM { namespace thrift {

class SIEMThriftIf {
 public:
  virtual ~SIEMThriftIf() {}
  virtual bool Recv(const std::string& strEvent) = 0;
  virtual bool Handle(const SIEMThriftEvent& tEvent) = 0;
};

class SIEMThriftIfFactory {
 public:
  typedef SIEMThriftIf Handler;

  virtual ~SIEMThriftIfFactory() {}

  virtual SIEMThriftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SIEMThriftIf* /* handler */) = 0;
};

class SIEMThriftIfSingletonFactory : virtual public SIEMThriftIfFactory {
 public:
  SIEMThriftIfSingletonFactory(const boost::shared_ptr<SIEMThriftIf>& iface) : iface_(iface) {}
  virtual ~SIEMThriftIfSingletonFactory() {}

  virtual SIEMThriftIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SIEMThriftIf* /* handler */) {}

 protected:
  boost::shared_ptr<SIEMThriftIf> iface_;
};

class SIEMThriftNull : virtual public SIEMThriftIf {
 public:
  virtual ~SIEMThriftNull() {}
  bool Recv(const std::string& /* strEvent */) {
    bool _return = false;
    return _return;
  }
  bool Handle(const SIEMThriftEvent& /* tEvent */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _SIEMThrift_Recv_args__isset {
  _SIEMThrift_Recv_args__isset() : strEvent(false) {}
  bool strEvent;
} _SIEMThrift_Recv_args__isset;

class SIEMThrift_Recv_args {
 public:

  SIEMThrift_Recv_args() : strEvent() {
  }

  virtual ~SIEMThrift_Recv_args() throw() {}

  std::string strEvent;

  _SIEMThrift_Recv_args__isset __isset;

  void __set_strEvent(const std::string& val) {
    strEvent = val;
  }

  bool operator == (const SIEMThrift_Recv_args & rhs) const
  {
    if (!(strEvent == rhs.strEvent))
      return false;
    return true;
  }
  bool operator != (const SIEMThrift_Recv_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIEMThrift_Recv_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIEMThrift_Recv_pargs {
 public:


  virtual ~SIEMThrift_Recv_pargs() throw() {}

  const std::string* strEvent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIEMThrift_Recv_result__isset {
  _SIEMThrift_Recv_result__isset() : success(false) {}
  bool success;
} _SIEMThrift_Recv_result__isset;

class SIEMThrift_Recv_result {
 public:

  SIEMThrift_Recv_result() : success(0) {
  }

  virtual ~SIEMThrift_Recv_result() throw() {}

  bool success;

  _SIEMThrift_Recv_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SIEMThrift_Recv_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIEMThrift_Recv_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIEMThrift_Recv_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIEMThrift_Recv_presult__isset {
  _SIEMThrift_Recv_presult__isset() : success(false) {}
  bool success;
} _SIEMThrift_Recv_presult__isset;

class SIEMThrift_Recv_presult {
 public:


  virtual ~SIEMThrift_Recv_presult() throw() {}

  bool* success;

  _SIEMThrift_Recv_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIEMThrift_Handle_args__isset {
  _SIEMThrift_Handle_args__isset() : tEvent(false) {}
  bool tEvent;
} _SIEMThrift_Handle_args__isset;

class SIEMThrift_Handle_args {
 public:

  SIEMThrift_Handle_args() {
  }

  virtual ~SIEMThrift_Handle_args() throw() {}

  SIEMThriftEvent tEvent;

  _SIEMThrift_Handle_args__isset __isset;

  void __set_tEvent(const SIEMThriftEvent& val) {
    tEvent = val;
  }

  bool operator == (const SIEMThrift_Handle_args & rhs) const
  {
    if (!(tEvent == rhs.tEvent))
      return false;
    return true;
  }
  bool operator != (const SIEMThrift_Handle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIEMThrift_Handle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIEMThrift_Handle_pargs {
 public:


  virtual ~SIEMThrift_Handle_pargs() throw() {}

  const SIEMThriftEvent* tEvent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIEMThrift_Handle_result__isset {
  _SIEMThrift_Handle_result__isset() : success(false) {}
  bool success;
} _SIEMThrift_Handle_result__isset;

class SIEMThrift_Handle_result {
 public:

  SIEMThrift_Handle_result() : success(0) {
  }

  virtual ~SIEMThrift_Handle_result() throw() {}

  bool success;

  _SIEMThrift_Handle_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SIEMThrift_Handle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIEMThrift_Handle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIEMThrift_Handle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIEMThrift_Handle_presult__isset {
  _SIEMThrift_Handle_presult__isset() : success(false) {}
  bool success;
} _SIEMThrift_Handle_presult__isset;

class SIEMThrift_Handle_presult {
 public:


  virtual ~SIEMThrift_Handle_presult() throw() {}

  bool* success;

  _SIEMThrift_Handle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SIEMThriftClient : virtual public SIEMThriftIf {
 public:
  SIEMThriftClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SIEMThriftClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Recv(const std::string& strEvent);
  void send_Recv(const std::string& strEvent);
  bool recv_Recv();
  bool Handle(const SIEMThriftEvent& tEvent);
  void send_Handle(const SIEMThriftEvent& tEvent);
  bool recv_Handle();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SIEMThriftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SIEMThriftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SIEMThriftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Recv(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Handle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SIEMThriftProcessor(boost::shared_ptr<SIEMThriftIf> iface) :
    iface_(iface) {
    processMap_["Recv"] = &SIEMThriftProcessor::process_Recv;
    processMap_["Handle"] = &SIEMThriftProcessor::process_Handle;
  }

  virtual ~SIEMThriftProcessor() {}
};

class SIEMThriftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SIEMThriftProcessorFactory(const ::boost::shared_ptr< SIEMThriftIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SIEMThriftIfFactory > handlerFactory_;
};

class SIEMThriftMultiface : virtual public SIEMThriftIf {
 public:
  SIEMThriftMultiface(std::vector<boost::shared_ptr<SIEMThriftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SIEMThriftMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SIEMThriftIf> > ifaces_;
  SIEMThriftMultiface() {}
  void add(boost::shared_ptr<SIEMThriftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool Recv(const std::string& strEvent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Recv(strEvent);
    }
    return ifaces_[i]->Recv(strEvent);
  }

  bool Handle(const SIEMThriftEvent& tEvent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Handle(tEvent);
    }
    return ifaces_[i]->Handle(tEvent);
  }

};

}} // namespace

#endif
