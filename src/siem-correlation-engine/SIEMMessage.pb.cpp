// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SIEMMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SIEMMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace SIEM {

void protobuf_ShutdownFile_SIEMMessage_2eproto() {
  delete SIEMPbMessage::default_instance_;
  delete SIEMPbMessage_SIEMEvent::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SIEMMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SIEMMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SIEMPbMessage::default_instance_ = new SIEMPbMessage();
  SIEMPbMessage_SIEMEvent::default_instance_ = new SIEMPbMessage_SIEMEvent();
  SIEMPbMessage::default_instance_->InitAsDefaultInstance();
  SIEMPbMessage_SIEMEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SIEMMessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SIEMMessage_2eproto_once_);
void protobuf_AddDesc_SIEMMessage_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SIEMMessage_2eproto_once_,
                 &protobuf_AddDesc_SIEMMessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SIEMMessage_2eproto {
  StaticDescriptorInitializer_SIEMMessage_2eproto() {
    protobuf_AddDesc_SIEMMessage_2eproto();
  }
} static_descriptor_initializer_SIEMMessage_2eproto_;
#endif

// ===================================================================

bool SIEMPbMessage_SIEMProtocolType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 6:
    case 17:
    case 134:
    case 135:
    case 136:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEM_PROTOCOL_NONE;
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEM_PROTOCOL_ICMP;
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEM_PROTOCOL_TCP;
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEM_PROTOCOL_UDP;
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEM_PROTOCOL_ARP_EVENT;
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEM_PROTOCOL_OS_EVENT;
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEM_PROTOCOL_SERVER_EVENT;
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEMProtocolType_MIN;
const SIEMPbMessage_SIEMProtocolType SIEMPbMessage::SIEMProtocolType_MAX;
const int SIEMPbMessage::SIEMProtocolType_ARRAYSIZE;
#endif  // _MSC_VER
bool SIEMPbMessage_SIEMEventType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SIEMPbMessage_SIEMEventType SIEMPbMessage::SIEM_EVENT_NONE;
const SIEMPbMessage_SIEMEventType SIEMPbMessage::SIEM_EVENT_DETECTOR;
const SIEMPbMessage_SIEMEventType SIEMPbMessage::SIEM_EVENT_MONITOR;
const SIEMPbMessage_SIEMEventType SIEMPbMessage::SIEM_EVENT_BACKLOG;
const SIEMPbMessage_SIEMEventType SIEMPbMessage::SIEMEventType_MIN;
const SIEMPbMessage_SIEMEventType SIEMPbMessage::SIEMEventType_MAX;
const int SIEMPbMessage::SIEMEventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SIEMPbMessage_SIEMEvent::kPluginIdUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kPluginSidUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kDataUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kFdataUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kEventTypeEnumFieldNumber;
const int SIEMPbMessage_SIEMEvent::kSrcIpv4Uint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kDstIpv4Uint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kDeviceIpv4Uint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kInterfaceStrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kLogStrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kEventIdStrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kProtocolTypeEnumFieldNumber;
const int SIEMPbMessage_SIEMEvent::kSrcPortUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kDstPortUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kSnortSidUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kSnortCidUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kPriorityUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kOccurrencesUint32FieldNumber;
const int SIEMPbMessage_SIEMEvent::kCtxStrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUsernameStrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kPasswordStrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kFilenameStrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata1StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata2StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata3StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata4StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata5StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata6StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata7StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata8StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kUserdata9StrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kSensorIdStrFieldNumber;
const int SIEMPbMessage_SIEMEvent::kBinaryDataStrFieldNumber;
#endif  // !_MSC_VER

SIEMPbMessage_SIEMEvent::SIEMPbMessage_SIEMEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SIEMPbMessage_SIEMEvent::InitAsDefaultInstance() {
}

SIEMPbMessage_SIEMEvent::SIEMPbMessage_SIEMEvent(const SIEMPbMessage_SIEMEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SIEMPbMessage_SIEMEvent::SharedCtor() {
  _cached_size_ = 0;
  plugin_id_uint32_ = 0u;
  plugin_sid_uint32_ = 0u;
  data_uint32_ = 0u;
  fdata_uint32_ = 0u;
  event_type_enum_ = -1;
  src_ipv4_uint32_ = 0u;
  dst_ipv4_uint32_ = 0u;
  device_ipv4_uint32_ = 0u;
  interface_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_id_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocol_type_enum_ = -1;
  src_port_uint32_ = 0u;
  dst_port_uint32_ = 0u;
  snort_sid_uint32_ = 0u;
  snort_cid_uint32_ = 0u;
  priority_uint32_ = 0u;
  occurrences_uint32_ = 0u;
  ctx_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata1_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata2_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata3_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata4_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata5_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata6_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata7_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata8_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata9_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sensor_id_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  binary_data_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SIEMPbMessage_SIEMEvent::~SIEMPbMessage_SIEMEvent() {
  SharedDtor();
}

void SIEMPbMessage_SIEMEvent::SharedDtor() {
  if (interface_str_ != &::google::protobuf::internal::kEmptyString) {
    delete interface_str_;
  }
  if (log_str_ != &::google::protobuf::internal::kEmptyString) {
    delete log_str_;
  }
  if (event_id_str_ != &::google::protobuf::internal::kEmptyString) {
    delete event_id_str_;
  }
  if (ctx_str_ != &::google::protobuf::internal::kEmptyString) {
    delete ctx_str_;
  }
  if (username_str_ != &::google::protobuf::internal::kEmptyString) {
    delete username_str_;
  }
  if (password_str_ != &::google::protobuf::internal::kEmptyString) {
    delete password_str_;
  }
  if (filename_str_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_str_;
  }
  if (userdata1_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata1_str_;
  }
  if (userdata2_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata2_str_;
  }
  if (userdata3_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata3_str_;
  }
  if (userdata4_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata4_str_;
  }
  if (userdata5_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata5_str_;
  }
  if (userdata6_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata6_str_;
  }
  if (userdata7_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata7_str_;
  }
  if (userdata8_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata8_str_;
  }
  if (userdata9_str_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata9_str_;
  }
  if (sensor_id_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sensor_id_str_;
  }
  if (binary_data_str_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_data_str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SIEMPbMessage_SIEMEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SIEMPbMessage_SIEMEvent& SIEMPbMessage_SIEMEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SIEMMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SIEMMessage_2eproto();
#endif
  return *default_instance_;
}

SIEMPbMessage_SIEMEvent* SIEMPbMessage_SIEMEvent::default_instance_ = NULL;

SIEMPbMessage_SIEMEvent* SIEMPbMessage_SIEMEvent::New() const {
  return new SIEMPbMessage_SIEMEvent;
}

void SIEMPbMessage_SIEMEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plugin_id_uint32_ = 0u;
    plugin_sid_uint32_ = 0u;
    data_uint32_ = 0u;
    fdata_uint32_ = 0u;
    event_type_enum_ = -1;
    src_ipv4_uint32_ = 0u;
    dst_ipv4_uint32_ = 0u;
    device_ipv4_uint32_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_interface_str()) {
      if (interface_str_ != &::google::protobuf::internal::kEmptyString) {
        interface_str_->clear();
      }
    }
    if (has_log_str()) {
      if (log_str_ != &::google::protobuf::internal::kEmptyString) {
        log_str_->clear();
      }
    }
    if (has_event_id_str()) {
      if (event_id_str_ != &::google::protobuf::internal::kEmptyString) {
        event_id_str_->clear();
      }
    }
    protocol_type_enum_ = -1;
    src_port_uint32_ = 0u;
    dst_port_uint32_ = 0u;
    snort_sid_uint32_ = 0u;
    snort_cid_uint32_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    priority_uint32_ = 0u;
    occurrences_uint32_ = 0u;
    if (has_ctx_str()) {
      if (ctx_str_ != &::google::protobuf::internal::kEmptyString) {
        ctx_str_->clear();
      }
    }
    if (has_username_str()) {
      if (username_str_ != &::google::protobuf::internal::kEmptyString) {
        username_str_->clear();
      }
    }
    if (has_password_str()) {
      if (password_str_ != &::google::protobuf::internal::kEmptyString) {
        password_str_->clear();
      }
    }
    if (has_filename_str()) {
      if (filename_str_ != &::google::protobuf::internal::kEmptyString) {
        filename_str_->clear();
      }
    }
    if (has_userdata1_str()) {
      if (userdata1_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata1_str_->clear();
      }
    }
    if (has_userdata2_str()) {
      if (userdata2_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata2_str_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_userdata3_str()) {
      if (userdata3_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata3_str_->clear();
      }
    }
    if (has_userdata4_str()) {
      if (userdata4_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata4_str_->clear();
      }
    }
    if (has_userdata5_str()) {
      if (userdata5_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata5_str_->clear();
      }
    }
    if (has_userdata6_str()) {
      if (userdata6_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata6_str_->clear();
      }
    }
    if (has_userdata7_str()) {
      if (userdata7_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata7_str_->clear();
      }
    }
    if (has_userdata8_str()) {
      if (userdata8_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata8_str_->clear();
      }
    }
    if (has_userdata9_str()) {
      if (userdata9_str_ != &::google::protobuf::internal::kEmptyString) {
        userdata9_str_->clear();
      }
    }
    if (has_sensor_id_str()) {
      if (sensor_id_str_ != &::google::protobuf::internal::kEmptyString) {
        sensor_id_str_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_binary_data_str()) {
      if (binary_data_str_ != &::google::protobuf::internal::kEmptyString) {
        binary_data_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SIEMPbMessage_SIEMEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plugin_id_uint32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plugin_id_uint32_)));
          set_has_plugin_id_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plugin_sid_uint32;
        break;
      }

      // required uint32 plugin_sid_uint32 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plugin_sid_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plugin_sid_uint32_)));
          set_has_plugin_sid_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_uint32;
        break;
      }

      // required uint32 data_uint32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_uint32_)));
          set_has_data_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fdata_uint32;
        break;
      }

      // required uint32 fdata_uint32 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fdata_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fdata_uint32_)));
          set_has_fdata_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_type_enum;
        break;
      }

      // required .SIEM.SIEMPbMessage.SIEMEventType event_type_enum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SIEM::SIEMPbMessage_SIEMEventType_IsValid(value)) {
            set_event_type_enum(static_cast< ::SIEM::SIEMPbMessage_SIEMEventType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_src_ipv4_uint32;
        break;
      }

      // required uint32 src_ipv4_uint32 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_ipv4_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_ipv4_uint32_)));
          set_has_src_ipv4_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dst_ipv4_uint32;
        break;
      }

      // required uint32 dst_ipv4_uint32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_ipv4_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_ipv4_uint32_)));
          set_has_dst_ipv4_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_device_ipv4_uint32;
        break;
      }

      // required uint32 device_ipv4_uint32 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_ipv4_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_ipv4_uint32_)));
          set_has_device_ipv4_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_interface_str;
        break;
      }

      // required string interface_str = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interface_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_log_str;
        break;
      }

      // required string log_str = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_event_id_str;
        break;
      }

      // required string event_id_str = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_id_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_id_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_protocol_type_enum;
        break;
      }

      // optional .SIEM.SIEMPbMessage.SIEMProtocolType protocol_type_enum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_type_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SIEM::SIEMPbMessage_SIEMProtocolType_IsValid(value)) {
            set_protocol_type_enum(static_cast< ::SIEM::SIEMPbMessage_SIEMProtocolType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_src_port_uint32;
        break;
      }

      // optional uint32 src_port_uint32 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_port_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_port_uint32_)));
          set_has_src_port_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dst_port_uint32;
        break;
      }

      // optional uint32 dst_port_uint32 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_port_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_port_uint32_)));
          set_has_dst_port_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_snort_sid_uint32;
        break;
      }

      // optional uint32 snort_sid_uint32 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snort_sid_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snort_sid_uint32_)));
          set_has_snort_sid_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_snort_cid_uint32;
        break;
      }

      // optional uint32 snort_cid_uint32 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snort_cid_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snort_cid_uint32_)));
          set_has_snort_cid_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_priority_uint32;
        break;
      }

      // optional uint32 priority_uint32 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_uint32_)));
          set_has_priority_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_occurrences_uint32;
        break;
      }

      // optional uint32 occurrences_uint32 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occurrences_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occurrences_uint32_)));
          set_has_occurrences_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_ctx_str;
        break;
      }

      // optional string ctx_str = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ctx_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ctx_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_username_str;
        break;
      }

      // optional string username_str = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_password_str;
        break;
      }

      // optional string password_str = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_filename_str;
        break;
      }

      // optional string filename_str = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_userdata1_str;
        break;
      }

      // optional string userdata1_str = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata1_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata1_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_userdata2_str;
        break;
      }

      // optional string userdata2_str = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata2_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata2_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_userdata3_str;
        break;
      }

      // optional string userdata3_str = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata3_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata3_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_userdata4_str;
        break;
      }

      // optional string userdata4_str = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata4_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata4_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_userdata5_str;
        break;
      }

      // optional string userdata5_str = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata5_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata5_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_userdata6_str;
        break;
      }

      // optional string userdata6_str = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata6_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata6_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_userdata7_str;
        break;
      }

      // optional string userdata7_str = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata7_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata7_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_userdata8_str;
        break;
      }

      // optional string userdata8_str = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata8_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata8_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_userdata9_str;
        break;
      }

      // optional string userdata9_str = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata9_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata9_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_sensor_id_str;
        break;
      }

      // optional string sensor_id_str = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_id_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_binary_data_str;
        break;
      }

      // optional string binary_data_str = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary_data_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binary_data_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SIEMPbMessage_SIEMEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plugin_id_uint32 = 1;
  if (has_plugin_id_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plugin_id_uint32(), output);
  }

  // required uint32 plugin_sid_uint32 = 2;
  if (has_plugin_sid_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plugin_sid_uint32(), output);
  }

  // required uint32 data_uint32 = 3;
  if (has_data_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_uint32(), output);
  }

  // required uint32 fdata_uint32 = 4;
  if (has_fdata_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fdata_uint32(), output);
  }

  // required .SIEM.SIEMPbMessage.SIEMEventType event_type_enum = 5;
  if (has_event_type_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->event_type_enum(), output);
  }

  // required uint32 src_ipv4_uint32 = 6;
  if (has_src_ipv4_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->src_ipv4_uint32(), output);
  }

  // required uint32 dst_ipv4_uint32 = 7;
  if (has_dst_ipv4_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dst_ipv4_uint32(), output);
  }

  // required uint32 device_ipv4_uint32 = 8;
  if (has_device_ipv4_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->device_ipv4_uint32(), output);
  }

  // required string interface_str = 9;
  if (has_interface_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->interface_str(), output);
  }

  // required string log_str = 10;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->log_str(), output);
  }

  // required string event_id_str = 11;
  if (has_event_id_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->event_id_str(), output);
  }

  // optional .SIEM.SIEMPbMessage.SIEMProtocolType protocol_type_enum = 12;
  if (has_protocol_type_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->protocol_type_enum(), output);
  }

  // optional uint32 src_port_uint32 = 13;
  if (has_src_port_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->src_port_uint32(), output);
  }

  // optional uint32 dst_port_uint32 = 14;
  if (has_dst_port_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dst_port_uint32(), output);
  }

  // optional uint32 snort_sid_uint32 = 15;
  if (has_snort_sid_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->snort_sid_uint32(), output);
  }

  // optional uint32 snort_cid_uint32 = 16;
  if (has_snort_cid_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->snort_cid_uint32(), output);
  }

  // optional uint32 priority_uint32 = 17;
  if (has_priority_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->priority_uint32(), output);
  }

  // optional uint32 occurrences_uint32 = 18;
  if (has_occurrences_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->occurrences_uint32(), output);
  }

  // optional string ctx_str = 19;
  if (has_ctx_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->ctx_str(), output);
  }

  // optional string username_str = 20;
  if (has_username_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->username_str(), output);
  }

  // optional string password_str = 21;
  if (has_password_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->password_str(), output);
  }

  // optional string filename_str = 22;
  if (has_filename_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->filename_str(), output);
  }

  // optional string userdata1_str = 23;
  if (has_userdata1_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->userdata1_str(), output);
  }

  // optional string userdata2_str = 24;
  if (has_userdata2_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->userdata2_str(), output);
  }

  // optional string userdata3_str = 25;
  if (has_userdata3_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->userdata3_str(), output);
  }

  // optional string userdata4_str = 26;
  if (has_userdata4_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->userdata4_str(), output);
  }

  // optional string userdata5_str = 27;
  if (has_userdata5_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->userdata5_str(), output);
  }

  // optional string userdata6_str = 28;
  if (has_userdata6_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->userdata6_str(), output);
  }

  // optional string userdata7_str = 29;
  if (has_userdata7_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->userdata7_str(), output);
  }

  // optional string userdata8_str = 30;
  if (has_userdata8_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->userdata8_str(), output);
  }

  // optional string userdata9_str = 31;
  if (has_userdata9_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->userdata9_str(), output);
  }

  // optional string sensor_id_str = 32;
  if (has_sensor_id_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->sensor_id_str(), output);
  }

  // optional string binary_data_str = 33;
  if (has_binary_data_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->binary_data_str(), output);
  }

}

int SIEMPbMessage_SIEMEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plugin_id_uint32 = 1;
    if (has_plugin_id_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plugin_id_uint32());
    }

    // required uint32 plugin_sid_uint32 = 2;
    if (has_plugin_sid_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plugin_sid_uint32());
    }

    // required uint32 data_uint32 = 3;
    if (has_data_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_uint32());
    }

    // required uint32 fdata_uint32 = 4;
    if (has_fdata_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fdata_uint32());
    }

    // required .SIEM.SIEMPbMessage.SIEMEventType event_type_enum = 5;
    if (has_event_type_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type_enum());
    }

    // required uint32 src_ipv4_uint32 = 6;
    if (has_src_ipv4_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_ipv4_uint32());
    }

    // required uint32 dst_ipv4_uint32 = 7;
    if (has_dst_ipv4_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_ipv4_uint32());
    }

    // required uint32 device_ipv4_uint32 = 8;
    if (has_device_ipv4_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_ipv4_uint32());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string interface_str = 9;
    if (has_interface_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface_str());
    }

    // required string log_str = 10;
    if (has_log_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_str());
    }

    // required string event_id_str = 11;
    if (has_event_id_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_id_str());
    }

    // optional .SIEM.SIEMPbMessage.SIEMProtocolType protocol_type_enum = 12;
    if (has_protocol_type_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_type_enum());
    }

    // optional uint32 src_port_uint32 = 13;
    if (has_src_port_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_port_uint32());
    }

    // optional uint32 dst_port_uint32 = 14;
    if (has_dst_port_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_port_uint32());
    }

    // optional uint32 snort_sid_uint32 = 15;
    if (has_snort_sid_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snort_sid_uint32());
    }

    // optional uint32 snort_cid_uint32 = 16;
    if (has_snort_cid_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snort_cid_uint32());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 priority_uint32 = 17;
    if (has_priority_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority_uint32());
    }

    // optional uint32 occurrences_uint32 = 18;
    if (has_occurrences_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occurrences_uint32());
    }

    // optional string ctx_str = 19;
    if (has_ctx_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ctx_str());
    }

    // optional string username_str = 20;
    if (has_username_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username_str());
    }

    // optional string password_str = 21;
    if (has_password_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_str());
    }

    // optional string filename_str = 22;
    if (has_filename_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename_str());
    }

    // optional string userdata1_str = 23;
    if (has_userdata1_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata1_str());
    }

    // optional string userdata2_str = 24;
    if (has_userdata2_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata2_str());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string userdata3_str = 25;
    if (has_userdata3_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata3_str());
    }

    // optional string userdata4_str = 26;
    if (has_userdata4_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata4_str());
    }

    // optional string userdata5_str = 27;
    if (has_userdata5_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata5_str());
    }

    // optional string userdata6_str = 28;
    if (has_userdata6_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata6_str());
    }

    // optional string userdata7_str = 29;
    if (has_userdata7_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata7_str());
    }

    // optional string userdata8_str = 30;
    if (has_userdata8_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata8_str());
    }

    // optional string userdata9_str = 31;
    if (has_userdata9_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata9_str());
    }

    // optional string sensor_id_str = 32;
    if (has_sensor_id_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_id_str());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string binary_data_str = 33;
    if (has_binary_data_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->binary_data_str());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SIEMPbMessage_SIEMEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SIEMPbMessage_SIEMEvent*>(&from));
}

void SIEMPbMessage_SIEMEvent::MergeFrom(const SIEMPbMessage_SIEMEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_id_uint32()) {
      set_plugin_id_uint32(from.plugin_id_uint32());
    }
    if (from.has_plugin_sid_uint32()) {
      set_plugin_sid_uint32(from.plugin_sid_uint32());
    }
    if (from.has_data_uint32()) {
      set_data_uint32(from.data_uint32());
    }
    if (from.has_fdata_uint32()) {
      set_fdata_uint32(from.fdata_uint32());
    }
    if (from.has_event_type_enum()) {
      set_event_type_enum(from.event_type_enum());
    }
    if (from.has_src_ipv4_uint32()) {
      set_src_ipv4_uint32(from.src_ipv4_uint32());
    }
    if (from.has_dst_ipv4_uint32()) {
      set_dst_ipv4_uint32(from.dst_ipv4_uint32());
    }
    if (from.has_device_ipv4_uint32()) {
      set_device_ipv4_uint32(from.device_ipv4_uint32());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interface_str()) {
      set_interface_str(from.interface_str());
    }
    if (from.has_log_str()) {
      set_log_str(from.log_str());
    }
    if (from.has_event_id_str()) {
      set_event_id_str(from.event_id_str());
    }
    if (from.has_protocol_type_enum()) {
      set_protocol_type_enum(from.protocol_type_enum());
    }
    if (from.has_src_port_uint32()) {
      set_src_port_uint32(from.src_port_uint32());
    }
    if (from.has_dst_port_uint32()) {
      set_dst_port_uint32(from.dst_port_uint32());
    }
    if (from.has_snort_sid_uint32()) {
      set_snort_sid_uint32(from.snort_sid_uint32());
    }
    if (from.has_snort_cid_uint32()) {
      set_snort_cid_uint32(from.snort_cid_uint32());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_priority_uint32()) {
      set_priority_uint32(from.priority_uint32());
    }
    if (from.has_occurrences_uint32()) {
      set_occurrences_uint32(from.occurrences_uint32());
    }
    if (from.has_ctx_str()) {
      set_ctx_str(from.ctx_str());
    }
    if (from.has_username_str()) {
      set_username_str(from.username_str());
    }
    if (from.has_password_str()) {
      set_password_str(from.password_str());
    }
    if (from.has_filename_str()) {
      set_filename_str(from.filename_str());
    }
    if (from.has_userdata1_str()) {
      set_userdata1_str(from.userdata1_str());
    }
    if (from.has_userdata2_str()) {
      set_userdata2_str(from.userdata2_str());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_userdata3_str()) {
      set_userdata3_str(from.userdata3_str());
    }
    if (from.has_userdata4_str()) {
      set_userdata4_str(from.userdata4_str());
    }
    if (from.has_userdata5_str()) {
      set_userdata5_str(from.userdata5_str());
    }
    if (from.has_userdata6_str()) {
      set_userdata6_str(from.userdata6_str());
    }
    if (from.has_userdata7_str()) {
      set_userdata7_str(from.userdata7_str());
    }
    if (from.has_userdata8_str()) {
      set_userdata8_str(from.userdata8_str());
    }
    if (from.has_userdata9_str()) {
      set_userdata9_str(from.userdata9_str());
    }
    if (from.has_sensor_id_str()) {
      set_sensor_id_str(from.sensor_id_str());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_binary_data_str()) {
      set_binary_data_str(from.binary_data_str());
    }
  }
}

void SIEMPbMessage_SIEMEvent::CopyFrom(const SIEMPbMessage_SIEMEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIEMPbMessage_SIEMEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void SIEMPbMessage_SIEMEvent::Swap(SIEMPbMessage_SIEMEvent* other) {
  if (other != this) {
    std::swap(plugin_id_uint32_, other->plugin_id_uint32_);
    std::swap(plugin_sid_uint32_, other->plugin_sid_uint32_);
    std::swap(data_uint32_, other->data_uint32_);
    std::swap(fdata_uint32_, other->fdata_uint32_);
    std::swap(event_type_enum_, other->event_type_enum_);
    std::swap(src_ipv4_uint32_, other->src_ipv4_uint32_);
    std::swap(dst_ipv4_uint32_, other->dst_ipv4_uint32_);
    std::swap(device_ipv4_uint32_, other->device_ipv4_uint32_);
    std::swap(interface_str_, other->interface_str_);
    std::swap(log_str_, other->log_str_);
    std::swap(event_id_str_, other->event_id_str_);
    std::swap(protocol_type_enum_, other->protocol_type_enum_);
    std::swap(src_port_uint32_, other->src_port_uint32_);
    std::swap(dst_port_uint32_, other->dst_port_uint32_);
    std::swap(snort_sid_uint32_, other->snort_sid_uint32_);
    std::swap(snort_cid_uint32_, other->snort_cid_uint32_);
    std::swap(priority_uint32_, other->priority_uint32_);
    std::swap(occurrences_uint32_, other->occurrences_uint32_);
    std::swap(ctx_str_, other->ctx_str_);
    std::swap(username_str_, other->username_str_);
    std::swap(password_str_, other->password_str_);
    std::swap(filename_str_, other->filename_str_);
    std::swap(userdata1_str_, other->userdata1_str_);
    std::swap(userdata2_str_, other->userdata2_str_);
    std::swap(userdata3_str_, other->userdata3_str_);
    std::swap(userdata4_str_, other->userdata4_str_);
    std::swap(userdata5_str_, other->userdata5_str_);
    std::swap(userdata6_str_, other->userdata6_str_);
    std::swap(userdata7_str_, other->userdata7_str_);
    std::swap(userdata8_str_, other->userdata8_str_);
    std::swap(userdata9_str_, other->userdata9_str_);
    std::swap(sensor_id_str_, other->sensor_id_str_);
    std::swap(binary_data_str_, other->binary_data_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SIEMPbMessage_SIEMEvent::GetTypeName() const {
  return "SIEM.SIEMPbMessage.SIEMEvent";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

SIEMPbMessage::SIEMPbMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SIEMPbMessage::InitAsDefaultInstance() {
}

SIEMPbMessage::SIEMPbMessage(const SIEMPbMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SIEMPbMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SIEMPbMessage::~SIEMPbMessage() {
  SharedDtor();
}

void SIEMPbMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SIEMPbMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SIEMPbMessage& SIEMPbMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SIEMMessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SIEMMessage_2eproto();
#endif
  return *default_instance_;
}

SIEMPbMessage* SIEMPbMessage::default_instance_ = NULL;

SIEMPbMessage* SIEMPbMessage::New() const {
  return new SIEMPbMessage;
}

void SIEMPbMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SIEMPbMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void SIEMPbMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int SIEMPbMessage::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SIEMPbMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SIEMPbMessage*>(&from));
}

void SIEMPbMessage::MergeFrom(const SIEMPbMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void SIEMPbMessage::CopyFrom(const SIEMPbMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIEMPbMessage::IsInitialized() const {

  return true;
}

void SIEMPbMessage::Swap(SIEMPbMessage* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SIEMPbMessage::GetTypeName() const {
  return "SIEM.SIEMPbMessage";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SIEM

// @@protoc_insertion_point(global_scope)
