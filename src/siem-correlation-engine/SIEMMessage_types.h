/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SIEMMessage_TYPES_H
#define SIEMMessage_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace SIEM { namespace thrift {

struct SIEMProtocolType {
  enum type {
    SIEM_PROTOCOL_NONE = 0,
    SIEM_PROTOCOL_ICMP = 1,
    SIEM_PROTOCOL_TCP = 6,
    SIEM_PROTOCOL_UDP = 17,
    SIEM_PROTOCOL_ARP_EVENT = 134,
    SIEM_PROTOCOL_OS_EVENT = 135,
    SIEM_PROTOCOL_SERVER_EVENT = 136
  };
};

extern const std::map<int, const char*> _SIEMProtocolType_VALUES_TO_NAMES;

struct SIEMEventType {
  enum type {
    SIEM_EVENT_NONE = 0,
    SIEM_EVENT_DETECTOR = 1,
    SIEM_EVENT_MONITOR = 2,
    SIEM_EVENT_BACKLOG = 3
  };
};

extern const std::map<int, const char*> _SIEMEventType_VALUES_TO_NAMES;

typedef struct _SIEMThriftEvent__isset {
  _SIEMThriftEvent__isset() : protocol_type_enum(true), src_port_int32(false), dst_port_int32(false), snort_sid_int32(false), snort_cid_int32(false), priority_int32(false), occurrences_int32(false), ctx_str(false), username_str(false), password_str(false), filename_str(false), userdata1_str(false), userdata2_str(false), userdata3_str(false), userdata4_str(false), userdata5_str(false), userdata6_str(false), userdata7_str(false), userdata8_str(false), userdata9_str(false), sensor_id_str(false), binary_data_str(false) {}
  bool protocol_type_enum;
  bool src_port_int32;
  bool dst_port_int32;
  bool snort_sid_int32;
  bool snort_cid_int32;
  bool priority_int32;
  bool occurrences_int32;
  bool ctx_str;
  bool username_str;
  bool password_str;
  bool filename_str;
  bool userdata1_str;
  bool userdata2_str;
  bool userdata3_str;
  bool userdata4_str;
  bool userdata5_str;
  bool userdata6_str;
  bool userdata7_str;
  bool userdata8_str;
  bool userdata9_str;
  bool sensor_id_str;
  bool binary_data_str;
} _SIEMThriftEvent__isset;

class SIEMThriftEvent {
 public:

  static const char* ascii_fingerprint; // = "EA6327FB260945CF748A34BA399647F3";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x63,0x27,0xFB,0x26,0x09,0x45,0xCF,0x74,0x8A,0x34,0xBA,0x39,0x96,0x47,0xF3};

  SIEMThriftEvent() : plugin_id_int32(0), plugin_sid_int32(0), data_int32(0), fdata_int32(0), event_type_enum((SIEMEventType::type)0), src_ipv4_int32(0), dst_ipv4_int32(0), device_ipv4_int32(0), interface_str(), log_str(), event_id_str(), protocol_type_enum((SIEMProtocolType::type)0), src_port_int32(0), dst_port_int32(0), snort_sid_int32(0), snort_cid_int32(0), priority_int32(0), occurrences_int32(0), ctx_str(), username_str(), password_str(), filename_str(), userdata1_str(), userdata2_str(), userdata3_str(), userdata4_str(), userdata5_str(), userdata6_str(), userdata7_str(), userdata8_str(), userdata9_str(), sensor_id_str(), binary_data_str() {
    event_type_enum = (SIEMEventType::type)0;

    protocol_type_enum = (SIEMProtocolType::type)0;

  }

  virtual ~SIEMThriftEvent() throw() {}

  int32_t plugin_id_int32;
  int32_t plugin_sid_int32;
  int32_t data_int32;
  int32_t fdata_int32;
  SIEMEventType::type event_type_enum;
  int32_t src_ipv4_int32;
  int32_t dst_ipv4_int32;
  int32_t device_ipv4_int32;
  std::string interface_str;
  std::string log_str;
  std::string event_id_str;
  SIEMProtocolType::type protocol_type_enum;
  int32_t src_port_int32;
  int32_t dst_port_int32;
  int32_t snort_sid_int32;
  int32_t snort_cid_int32;
  int32_t priority_int32;
  int32_t occurrences_int32;
  std::string ctx_str;
  std::string username_str;
  std::string password_str;
  std::string filename_str;
  std::string userdata1_str;
  std::string userdata2_str;
  std::string userdata3_str;
  std::string userdata4_str;
  std::string userdata5_str;
  std::string userdata6_str;
  std::string userdata7_str;
  std::string userdata8_str;
  std::string userdata9_str;
  std::string sensor_id_str;
  std::string binary_data_str;

  _SIEMThriftEvent__isset __isset;

  void __set_plugin_id_int32(const int32_t val) {
    plugin_id_int32 = val;
  }

  void __set_plugin_sid_int32(const int32_t val) {
    plugin_sid_int32 = val;
  }

  void __set_data_int32(const int32_t val) {
    data_int32 = val;
  }

  void __set_fdata_int32(const int32_t val) {
    fdata_int32 = val;
  }

  void __set_event_type_enum(const SIEMEventType::type val) {
    event_type_enum = val;
  }

  void __set_src_ipv4_int32(const int32_t val) {
    src_ipv4_int32 = val;
  }

  void __set_dst_ipv4_int32(const int32_t val) {
    dst_ipv4_int32 = val;
  }

  void __set_device_ipv4_int32(const int32_t val) {
    device_ipv4_int32 = val;
  }

  void __set_interface_str(const std::string& val) {
    interface_str = val;
  }

  void __set_log_str(const std::string& val) {
    log_str = val;
  }

  void __set_event_id_str(const std::string& val) {
    event_id_str = val;
  }

  void __set_protocol_type_enum(const SIEMProtocolType::type val) {
    protocol_type_enum = val;
  }

  void __set_src_port_int32(const int32_t val) {
    src_port_int32 = val;
    __isset.src_port_int32 = true;
  }

  void __set_dst_port_int32(const int32_t val) {
    dst_port_int32 = val;
    __isset.dst_port_int32 = true;
  }

  void __set_snort_sid_int32(const int32_t val) {
    snort_sid_int32 = val;
    __isset.snort_sid_int32 = true;
  }

  void __set_snort_cid_int32(const int32_t val) {
    snort_cid_int32 = val;
    __isset.snort_cid_int32 = true;
  }

  void __set_priority_int32(const int32_t val) {
    priority_int32 = val;
    __isset.priority_int32 = true;
  }

  void __set_occurrences_int32(const int32_t val) {
    occurrences_int32 = val;
    __isset.occurrences_int32 = true;
  }

  void __set_ctx_str(const std::string& val) {
    ctx_str = val;
    __isset.ctx_str = true;
  }

  void __set_username_str(const std::string& val) {
    username_str = val;
    __isset.username_str = true;
  }

  void __set_password_str(const std::string& val) {
    password_str = val;
    __isset.password_str = true;
  }

  void __set_filename_str(const std::string& val) {
    filename_str = val;
    __isset.filename_str = true;
  }

  void __set_userdata1_str(const std::string& val) {
    userdata1_str = val;
    __isset.userdata1_str = true;
  }

  void __set_userdata2_str(const std::string& val) {
    userdata2_str = val;
    __isset.userdata2_str = true;
  }

  void __set_userdata3_str(const std::string& val) {
    userdata3_str = val;
    __isset.userdata3_str = true;
  }

  void __set_userdata4_str(const std::string& val) {
    userdata4_str = val;
    __isset.userdata4_str = true;
  }

  void __set_userdata5_str(const std::string& val) {
    userdata5_str = val;
    __isset.userdata5_str = true;
  }

  void __set_userdata6_str(const std::string& val) {
    userdata6_str = val;
    __isset.userdata6_str = true;
  }

  void __set_userdata7_str(const std::string& val) {
    userdata7_str = val;
    __isset.userdata7_str = true;
  }

  void __set_userdata8_str(const std::string& val) {
    userdata8_str = val;
    __isset.userdata8_str = true;
  }

  void __set_userdata9_str(const std::string& val) {
    userdata9_str = val;
    __isset.userdata9_str = true;
  }

  void __set_sensor_id_str(const std::string& val) {
    sensor_id_str = val;
    __isset.sensor_id_str = true;
  }

  void __set_binary_data_str(const std::string& val) {
    binary_data_str = val;
    __isset.binary_data_str = true;
  }

  bool operator == (const SIEMThriftEvent & rhs) const
  {
    if (!(plugin_id_int32 == rhs.plugin_id_int32))
      return false;
    if (!(plugin_sid_int32 == rhs.plugin_sid_int32))
      return false;
    if (!(data_int32 == rhs.data_int32))
      return false;
    if (!(fdata_int32 == rhs.fdata_int32))
      return false;
    if (!(event_type_enum == rhs.event_type_enum))
      return false;
    if (!(src_ipv4_int32 == rhs.src_ipv4_int32))
      return false;
    if (!(dst_ipv4_int32 == rhs.dst_ipv4_int32))
      return false;
    if (!(device_ipv4_int32 == rhs.device_ipv4_int32))
      return false;
    if (!(interface_str == rhs.interface_str))
      return false;
    if (!(log_str == rhs.log_str))
      return false;
    if (!(event_id_str == rhs.event_id_str))
      return false;
    if (!(protocol_type_enum == rhs.protocol_type_enum))
      return false;
    if (__isset.src_port_int32 != rhs.__isset.src_port_int32)
      return false;
    else if (__isset.src_port_int32 && !(src_port_int32 == rhs.src_port_int32))
      return false;
    if (__isset.dst_port_int32 != rhs.__isset.dst_port_int32)
      return false;
    else if (__isset.dst_port_int32 && !(dst_port_int32 == rhs.dst_port_int32))
      return false;
    if (__isset.snort_sid_int32 != rhs.__isset.snort_sid_int32)
      return false;
    else if (__isset.snort_sid_int32 && !(snort_sid_int32 == rhs.snort_sid_int32))
      return false;
    if (__isset.snort_cid_int32 != rhs.__isset.snort_cid_int32)
      return false;
    else if (__isset.snort_cid_int32 && !(snort_cid_int32 == rhs.snort_cid_int32))
      return false;
    if (__isset.priority_int32 != rhs.__isset.priority_int32)
      return false;
    else if (__isset.priority_int32 && !(priority_int32 == rhs.priority_int32))
      return false;
    if (__isset.occurrences_int32 != rhs.__isset.occurrences_int32)
      return false;
    else if (__isset.occurrences_int32 && !(occurrences_int32 == rhs.occurrences_int32))
      return false;
    if (__isset.ctx_str != rhs.__isset.ctx_str)
      return false;
    else if (__isset.ctx_str && !(ctx_str == rhs.ctx_str))
      return false;
    if (__isset.username_str != rhs.__isset.username_str)
      return false;
    else if (__isset.username_str && !(username_str == rhs.username_str))
      return false;
    if (__isset.password_str != rhs.__isset.password_str)
      return false;
    else if (__isset.password_str && !(password_str == rhs.password_str))
      return false;
    if (__isset.filename_str != rhs.__isset.filename_str)
      return false;
    else if (__isset.filename_str && !(filename_str == rhs.filename_str))
      return false;
    if (__isset.userdata1_str != rhs.__isset.userdata1_str)
      return false;
    else if (__isset.userdata1_str && !(userdata1_str == rhs.userdata1_str))
      return false;
    if (__isset.userdata2_str != rhs.__isset.userdata2_str)
      return false;
    else if (__isset.userdata2_str && !(userdata2_str == rhs.userdata2_str))
      return false;
    if (__isset.userdata3_str != rhs.__isset.userdata3_str)
      return false;
    else if (__isset.userdata3_str && !(userdata3_str == rhs.userdata3_str))
      return false;
    if (__isset.userdata4_str != rhs.__isset.userdata4_str)
      return false;
    else if (__isset.userdata4_str && !(userdata4_str == rhs.userdata4_str))
      return false;
    if (__isset.userdata5_str != rhs.__isset.userdata5_str)
      return false;
    else if (__isset.userdata5_str && !(userdata5_str == rhs.userdata5_str))
      return false;
    if (__isset.userdata6_str != rhs.__isset.userdata6_str)
      return false;
    else if (__isset.userdata6_str && !(userdata6_str == rhs.userdata6_str))
      return false;
    if (__isset.userdata7_str != rhs.__isset.userdata7_str)
      return false;
    else if (__isset.userdata7_str && !(userdata7_str == rhs.userdata7_str))
      return false;
    if (__isset.userdata8_str != rhs.__isset.userdata8_str)
      return false;
    else if (__isset.userdata8_str && !(userdata8_str == rhs.userdata8_str))
      return false;
    if (__isset.userdata9_str != rhs.__isset.userdata9_str)
      return false;
    else if (__isset.userdata9_str && !(userdata9_str == rhs.userdata9_str))
      return false;
    if (__isset.sensor_id_str != rhs.__isset.sensor_id_str)
      return false;
    else if (__isset.sensor_id_str && !(sensor_id_str == rhs.sensor_id_str))
      return false;
    if (__isset.binary_data_str != rhs.__isset.binary_data_str)
      return false;
    else if (__isset.binary_data_str && !(binary_data_str == rhs.binary_data_str))
      return false;
    return true;
  }
  bool operator != (const SIEMThriftEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIEMThriftEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SIEMThriftEvent &a, SIEMThriftEvent &b);

}} // namespace

#endif
